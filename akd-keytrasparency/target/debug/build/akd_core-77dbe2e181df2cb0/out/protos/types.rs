// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:NodeLabel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NodeLabel {
    // message fields
    // @@protoc_insertion_point(field:NodeLabel.label_val)
    pub label_val: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:NodeLabel.label_len)
    pub label_len: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:NodeLabel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NodeLabel {
    fn default() -> &'a NodeLabel {
        <NodeLabel as ::protobuf::Message>::default_instance()
    }
}

impl NodeLabel {
    pub fn new() -> NodeLabel {
        ::std::default::Default::default()
    }

    // optional bytes label_val = 1;

    pub fn label_val(&self) -> &[u8] {
        match self.label_val.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_label_val(&mut self) {
        self.label_val = ::std::option::Option::None;
    }

    pub fn has_label_val(&self) -> bool {
        self.label_val.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label_val(&mut self, v: ::std::vec::Vec<u8>) {
        self.label_val = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label_val(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.label_val.is_none() {
            self.label_val = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.label_val.as_mut().unwrap()
    }

    // Take field
    pub fn take_label_val(&mut self) -> ::std::vec::Vec<u8> {
        self.label_val.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint32 label_len = 2;

    pub fn label_len(&self) -> u32 {
        self.label_len.unwrap_or(0)
    }

    pub fn clear_label_len(&mut self) {
        self.label_len = ::std::option::Option::None;
    }

    pub fn has_label_len(&self) -> bool {
        self.label_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label_len(&mut self, v: u32) {
        self.label_len = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "label_val",
            |m: &NodeLabel| { &m.label_val },
            |m: &mut NodeLabel| { &mut m.label_val },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "label_len",
            |m: &NodeLabel| { &m.label_len },
            |m: &mut NodeLabel| { &mut m.label_len },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NodeLabel>(
            "NodeLabel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NodeLabel {
    const NAME: &'static str = "NodeLabel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.label_val = ::std::option::Option::Some(is.read_bytes()?);
                },
                16 => {
                    self.label_len = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.label_val.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.label_len {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.label_val.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.label_len {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NodeLabel {
        NodeLabel::new()
    }

    fn clear(&mut self) {
        self.label_val = ::std::option::Option::None;
        self.label_len = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NodeLabel {
        static instance: NodeLabel = NodeLabel {
            label_val: ::std::option::Option::None,
            label_len: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NodeLabel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NodeLabel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NodeLabel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeLabel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:AzksElement)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AzksElement {
    // message fields
    // @@protoc_insertion_point(field:AzksElement.label)
    pub label: ::protobuf::MessageField<NodeLabel>,
    // @@protoc_insertion_point(field:AzksElement.value)
    pub value: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:AzksElement.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AzksElement {
    fn default() -> &'a AzksElement {
        <AzksElement as ::protobuf::Message>::default_instance()
    }
}

impl AzksElement {
    pub fn new() -> AzksElement {
        ::std::default::Default::default()
    }

    // optional bytes value = 2;

    pub fn value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NodeLabel>(
            "label",
            |m: &AzksElement| { &m.label },
            |m: &mut AzksElement| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &AzksElement| { &m.value },
            |m: &mut AzksElement| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AzksElement>(
            "AzksElement",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AzksElement {
    const NAME: &'static str = "AzksElement";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.label)?;
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.label.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AzksElement {
        AzksElement::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AzksElement {
        static instance: AzksElement = AzksElement {
            label: ::protobuf::MessageField::none(),
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AzksElement {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AzksElement").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AzksElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AzksElement {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SiblingProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SiblingProof {
    // message fields
    // @@protoc_insertion_point(field:SiblingProof.label)
    pub label: ::protobuf::MessageField<NodeLabel>,
    // @@protoc_insertion_point(field:SiblingProof.siblings)
    pub siblings: ::std::vec::Vec<AzksElement>,
    // @@protoc_insertion_point(field:SiblingProof.direction)
    pub direction: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:SiblingProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SiblingProof {
    fn default() -> &'a SiblingProof {
        <SiblingProof as ::protobuf::Message>::default_instance()
    }
}

impl SiblingProof {
    pub fn new() -> SiblingProof {
        ::std::default::Default::default()
    }

    // optional uint32 direction = 3;

    pub fn direction(&self) -> u32 {
        self.direction.unwrap_or(0)
    }

    pub fn clear_direction(&mut self) {
        self.direction = ::std::option::Option::None;
    }

    pub fn has_direction(&self) -> bool {
        self.direction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: u32) {
        self.direction = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NodeLabel>(
            "label",
            |m: &SiblingProof| { &m.label },
            |m: &mut SiblingProof| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "siblings",
            |m: &SiblingProof| { &m.siblings },
            |m: &mut SiblingProof| { &mut m.siblings },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "direction",
            |m: &SiblingProof| { &m.direction },
            |m: &mut SiblingProof| { &mut m.direction },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SiblingProof>(
            "SiblingProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SiblingProof {
    const NAME: &'static str = "SiblingProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.label)?;
                },
                18 => {
                    self.siblings.push(is.read_message()?);
                },
                24 => {
                    self.direction = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.siblings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.direction {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.label.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        for v in &self.siblings {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.direction {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SiblingProof {
        SiblingProof::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.siblings.clear();
        self.direction = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SiblingProof {
        static instance: SiblingProof = SiblingProof {
            label: ::protobuf::MessageField::none(),
            siblings: ::std::vec::Vec::new(),
            direction: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SiblingProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SiblingProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SiblingProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SiblingProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:MembershipProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MembershipProof {
    // message fields
    // @@protoc_insertion_point(field:MembershipProof.label)
    pub label: ::protobuf::MessageField<NodeLabel>,
    // @@protoc_insertion_point(field:MembershipProof.hash_val)
    pub hash_val: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:MembershipProof.sibling_proofs)
    pub sibling_proofs: ::std::vec::Vec<SiblingProof>,
    // special fields
    // @@protoc_insertion_point(special_field:MembershipProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MembershipProof {
    fn default() -> &'a MembershipProof {
        <MembershipProof as ::protobuf::Message>::default_instance()
    }
}

impl MembershipProof {
    pub fn new() -> MembershipProof {
        ::std::default::Default::default()
    }

    // optional bytes hash_val = 2;

    pub fn hash_val(&self) -> &[u8] {
        match self.hash_val.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_hash_val(&mut self) {
        self.hash_val = ::std::option::Option::None;
    }

    pub fn has_hash_val(&self) -> bool {
        self.hash_val.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash_val(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash_val = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash_val(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hash_val.is_none() {
            self.hash_val = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.hash_val.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash_val(&mut self) -> ::std::vec::Vec<u8> {
        self.hash_val.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NodeLabel>(
            "label",
            |m: &MembershipProof| { &m.label },
            |m: &mut MembershipProof| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hash_val",
            |m: &MembershipProof| { &m.hash_val },
            |m: &mut MembershipProof| { &mut m.hash_val },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sibling_proofs",
            |m: &MembershipProof| { &m.sibling_proofs },
            |m: &mut MembershipProof| { &mut m.sibling_proofs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MembershipProof>(
            "MembershipProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MembershipProof {
    const NAME: &'static str = "MembershipProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.label)?;
                },
                18 => {
                    self.hash_val = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.sibling_proofs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.hash_val.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        for value in &self.sibling_proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.label.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.hash_val.as_ref() {
            os.write_bytes(2, v)?;
        }
        for v in &self.sibling_proofs {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MembershipProof {
        MembershipProof::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.hash_val = ::std::option::Option::None;
        self.sibling_proofs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MembershipProof {
        static instance: MembershipProof = MembershipProof {
            label: ::protobuf::MessageField::none(),
            hash_val: ::std::option::Option::None,
            sibling_proofs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MembershipProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MembershipProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MembershipProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MembershipProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:NonMembershipProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NonMembershipProof {
    // message fields
    // @@protoc_insertion_point(field:NonMembershipProof.label)
    pub label: ::protobuf::MessageField<NodeLabel>,
    // @@protoc_insertion_point(field:NonMembershipProof.longest_prefix)
    pub longest_prefix: ::protobuf::MessageField<NodeLabel>,
    // @@protoc_insertion_point(field:NonMembershipProof.longest_prefix_children)
    pub longest_prefix_children: ::std::vec::Vec<AzksElement>,
    // @@protoc_insertion_point(field:NonMembershipProof.longest_prefix_membership_proof)
    pub longest_prefix_membership_proof: ::protobuf::MessageField<MembershipProof>,
    // special fields
    // @@protoc_insertion_point(special_field:NonMembershipProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NonMembershipProof {
    fn default() -> &'a NonMembershipProof {
        <NonMembershipProof as ::protobuf::Message>::default_instance()
    }
}

impl NonMembershipProof {
    pub fn new() -> NonMembershipProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NodeLabel>(
            "label",
            |m: &NonMembershipProof| { &m.label },
            |m: &mut NonMembershipProof| { &mut m.label },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NodeLabel>(
            "longest_prefix",
            |m: &NonMembershipProof| { &m.longest_prefix },
            |m: &mut NonMembershipProof| { &mut m.longest_prefix },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "longest_prefix_children",
            |m: &NonMembershipProof| { &m.longest_prefix_children },
            |m: &mut NonMembershipProof| { &mut m.longest_prefix_children },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MembershipProof>(
            "longest_prefix_membership_proof",
            |m: &NonMembershipProof| { &m.longest_prefix_membership_proof },
            |m: &mut NonMembershipProof| { &mut m.longest_prefix_membership_proof },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NonMembershipProof>(
            "NonMembershipProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NonMembershipProof {
    const NAME: &'static str = "NonMembershipProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.label)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.longest_prefix)?;
                },
                26 => {
                    self.longest_prefix_children.push(is.read_message()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.longest_prefix_membership_proof)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.label.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.longest_prefix.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.longest_prefix_children {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.longest_prefix_membership_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.label.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.longest_prefix.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        for v in &self.longest_prefix_children {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.longest_prefix_membership_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NonMembershipProof {
        NonMembershipProof::new()
    }

    fn clear(&mut self) {
        self.label.clear();
        self.longest_prefix.clear();
        self.longest_prefix_children.clear();
        self.longest_prefix_membership_proof.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NonMembershipProof {
        static instance: NonMembershipProof = NonMembershipProof {
            label: ::protobuf::MessageField::none(),
            longest_prefix: ::protobuf::MessageField::none(),
            longest_prefix_children: ::std::vec::Vec::new(),
            longest_prefix_membership_proof: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NonMembershipProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NonMembershipProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NonMembershipProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NonMembershipProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:LookupProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LookupProof {
    // message fields
    // @@protoc_insertion_point(field:LookupProof.epoch)
    pub epoch: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:LookupProof.value)
    pub value: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:LookupProof.version)
    pub version: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:LookupProof.existence_vrf_proof)
    pub existence_vrf_proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:LookupProof.existence_proof)
    pub existence_proof: ::protobuf::MessageField<MembershipProof>,
    // @@protoc_insertion_point(field:LookupProof.marker_vrf_proof)
    pub marker_vrf_proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:LookupProof.marker_proof)
    pub marker_proof: ::protobuf::MessageField<MembershipProof>,
    // @@protoc_insertion_point(field:LookupProof.freshness_vrf_proof)
    pub freshness_vrf_proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:LookupProof.freshness_proof)
    pub freshness_proof: ::protobuf::MessageField<NonMembershipProof>,
    // @@protoc_insertion_point(field:LookupProof.commitment_nonce)
    pub commitment_nonce: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:LookupProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LookupProof {
    fn default() -> &'a LookupProof {
        <LookupProof as ::protobuf::Message>::default_instance()
    }
}

impl LookupProof {
    pub fn new() -> LookupProof {
        ::std::default::Default::default()
    }

    // optional uint64 epoch = 1;

    pub fn epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }

    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }

    // optional bytes value = 2;

    pub fn value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 version = 3;

    pub fn version(&self) -> u64 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional bytes existence_vrf_proof = 4;

    pub fn existence_vrf_proof(&self) -> &[u8] {
        match self.existence_vrf_proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_existence_vrf_proof(&mut self) {
        self.existence_vrf_proof = ::std::option::Option::None;
    }

    pub fn has_existence_vrf_proof(&self) -> bool {
        self.existence_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existence_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.existence_vrf_proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_existence_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.existence_vrf_proof.is_none() {
            self.existence_vrf_proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.existence_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_existence_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.existence_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes marker_vrf_proof = 6;

    pub fn marker_vrf_proof(&self) -> &[u8] {
        match self.marker_vrf_proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_marker_vrf_proof(&mut self) {
        self.marker_vrf_proof = ::std::option::Option::None;
    }

    pub fn has_marker_vrf_proof(&self) -> bool {
        self.marker_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_marker_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.marker_vrf_proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_marker_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.marker_vrf_proof.is_none() {
            self.marker_vrf_proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.marker_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_marker_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.marker_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes freshness_vrf_proof = 8;

    pub fn freshness_vrf_proof(&self) -> &[u8] {
        match self.freshness_vrf_proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_freshness_vrf_proof(&mut self) {
        self.freshness_vrf_proof = ::std::option::Option::None;
    }

    pub fn has_freshness_vrf_proof(&self) -> bool {
        self.freshness_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_freshness_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.freshness_vrf_proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_freshness_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.freshness_vrf_proof.is_none() {
            self.freshness_vrf_proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.freshness_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_freshness_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.freshness_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes commitment_nonce = 10;

    pub fn commitment_nonce(&self) -> &[u8] {
        match self.commitment_nonce.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_commitment_nonce(&mut self) {
        self.commitment_nonce = ::std::option::Option::None;
    }

    pub fn has_commitment_nonce(&self) -> bool {
        self.commitment_nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commitment_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.commitment_nonce = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commitment_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commitment_nonce.is_none() {
            self.commitment_nonce = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.commitment_nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_commitment_nonce(&mut self) -> ::std::vec::Vec<u8> {
        self.commitment_nonce.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "epoch",
            |m: &LookupProof| { &m.epoch },
            |m: &mut LookupProof| { &mut m.epoch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &LookupProof| { &m.value },
            |m: &mut LookupProof| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &LookupProof| { &m.version },
            |m: &mut LookupProof| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "existence_vrf_proof",
            |m: &LookupProof| { &m.existence_vrf_proof },
            |m: &mut LookupProof| { &mut m.existence_vrf_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MembershipProof>(
            "existence_proof",
            |m: &LookupProof| { &m.existence_proof },
            |m: &mut LookupProof| { &mut m.existence_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "marker_vrf_proof",
            |m: &LookupProof| { &m.marker_vrf_proof },
            |m: &mut LookupProof| { &mut m.marker_vrf_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MembershipProof>(
            "marker_proof",
            |m: &LookupProof| { &m.marker_proof },
            |m: &mut LookupProof| { &mut m.marker_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "freshness_vrf_proof",
            |m: &LookupProof| { &m.freshness_vrf_proof },
            |m: &mut LookupProof| { &mut m.freshness_vrf_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, NonMembershipProof>(
            "freshness_proof",
            |m: &LookupProof| { &m.freshness_proof },
            |m: &mut LookupProof| { &mut m.freshness_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "commitment_nonce",
            |m: &LookupProof| { &m.commitment_nonce },
            |m: &mut LookupProof| { &mut m.commitment_nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LookupProof>(
            "LookupProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LookupProof {
    const NAME: &'static str = "LookupProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.epoch = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.version = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    self.existence_vrf_proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.existence_proof)?;
                },
                50 => {
                    self.marker_vrf_proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.marker_proof)?;
                },
                66 => {
                    self.freshness_vrf_proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.freshness_proof)?;
                },
                82 => {
                    self.commitment_nonce = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.existence_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.existence_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.marker_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.marker_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.freshness_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        if let Some(v) = self.freshness_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.commitment_nonce.as_ref() {
            my_size += ::protobuf::rt::bytes_size(10, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.epoch {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.version {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.existence_vrf_proof.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.existence_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.marker_vrf_proof.as_ref() {
            os.write_bytes(6, v)?;
        }
        if let Some(v) = self.marker_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.freshness_vrf_proof.as_ref() {
            os.write_bytes(8, v)?;
        }
        if let Some(v) = self.freshness_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.commitment_nonce.as_ref() {
            os.write_bytes(10, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LookupProof {
        LookupProof::new()
    }

    fn clear(&mut self) {
        self.epoch = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.existence_vrf_proof = ::std::option::Option::None;
        self.existence_proof.clear();
        self.marker_vrf_proof = ::std::option::Option::None;
        self.marker_proof.clear();
        self.freshness_vrf_proof = ::std::option::Option::None;
        self.freshness_proof.clear();
        self.commitment_nonce = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LookupProof {
        static instance: LookupProof = LookupProof {
            epoch: ::std::option::Option::None,
            value: ::std::option::Option::None,
            version: ::std::option::Option::None,
            existence_vrf_proof: ::std::option::Option::None,
            existence_proof: ::protobuf::MessageField::none(),
            marker_vrf_proof: ::std::option::Option::None,
            marker_proof: ::protobuf::MessageField::none(),
            freshness_vrf_proof: ::std::option::Option::None,
            freshness_proof: ::protobuf::MessageField::none(),
            commitment_nonce: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LookupProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LookupProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LookupProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:UpdateProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct UpdateProof {
    // message fields
    // @@protoc_insertion_point(field:UpdateProof.epoch)
    pub epoch: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:UpdateProof.value)
    pub value: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:UpdateProof.version)
    pub version: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:UpdateProof.existence_vrf_proof)
    pub existence_vrf_proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:UpdateProof.existence_proof)
    pub existence_proof: ::protobuf::MessageField<MembershipProof>,
    // @@protoc_insertion_point(field:UpdateProof.previous_version_vrf_proof)
    pub previous_version_vrf_proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:UpdateProof.previous_version_proof)
    pub previous_version_proof: ::protobuf::MessageField<MembershipProof>,
    // @@protoc_insertion_point(field:UpdateProof.commitment_nonce)
    pub commitment_nonce: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:UpdateProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UpdateProof {
    fn default() -> &'a UpdateProof {
        <UpdateProof as ::protobuf::Message>::default_instance()
    }
}

impl UpdateProof {
    pub fn new() -> UpdateProof {
        ::std::default::Default::default()
    }

    // optional uint64 epoch = 1;

    pub fn epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }

    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }

    // optional bytes value = 2;

    pub fn value(&self) -> &[u8] {
        match self.value.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        self.value.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 version = 3;

    pub fn version(&self) -> u64 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = ::std::option::Option::Some(v);
    }

    // optional bytes existence_vrf_proof = 4;

    pub fn existence_vrf_proof(&self) -> &[u8] {
        match self.existence_vrf_proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_existence_vrf_proof(&mut self) {
        self.existence_vrf_proof = ::std::option::Option::None;
    }

    pub fn has_existence_vrf_proof(&self) -> bool {
        self.existence_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existence_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.existence_vrf_proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_existence_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.existence_vrf_proof.is_none() {
            self.existence_vrf_proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.existence_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_existence_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.existence_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes previous_version_vrf_proof = 6;

    pub fn previous_version_vrf_proof(&self) -> &[u8] {
        match self.previous_version_vrf_proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_previous_version_vrf_proof(&mut self) {
        self.previous_version_vrf_proof = ::std::option::Option::None;
    }

    pub fn has_previous_version_vrf_proof(&self) -> bool {
        self.previous_version_vrf_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_previous_version_vrf_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_version_vrf_proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_version_vrf_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.previous_version_vrf_proof.is_none() {
            self.previous_version_vrf_proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.previous_version_vrf_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_previous_version_vrf_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.previous_version_vrf_proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes commitment_nonce = 8;

    pub fn commitment_nonce(&self) -> &[u8] {
        match self.commitment_nonce.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_commitment_nonce(&mut self) {
        self.commitment_nonce = ::std::option::Option::None;
    }

    pub fn has_commitment_nonce(&self) -> bool {
        self.commitment_nonce.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commitment_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.commitment_nonce = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commitment_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.commitment_nonce.is_none() {
            self.commitment_nonce = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.commitment_nonce.as_mut().unwrap()
    }

    // Take field
    pub fn take_commitment_nonce(&mut self) -> ::std::vec::Vec<u8> {
        self.commitment_nonce.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "epoch",
            |m: &UpdateProof| { &m.epoch },
            |m: &mut UpdateProof| { &mut m.epoch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &UpdateProof| { &m.value },
            |m: &mut UpdateProof| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &UpdateProof| { &m.version },
            |m: &mut UpdateProof| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "existence_vrf_proof",
            |m: &UpdateProof| { &m.existence_vrf_proof },
            |m: &mut UpdateProof| { &mut m.existence_vrf_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MembershipProof>(
            "existence_proof",
            |m: &UpdateProof| { &m.existence_proof },
            |m: &mut UpdateProof| { &mut m.existence_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "previous_version_vrf_proof",
            |m: &UpdateProof| { &m.previous_version_vrf_proof },
            |m: &mut UpdateProof| { &mut m.previous_version_vrf_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MembershipProof>(
            "previous_version_proof",
            |m: &UpdateProof| { &m.previous_version_proof },
            |m: &mut UpdateProof| { &mut m.previous_version_proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "commitment_nonce",
            |m: &UpdateProof| { &m.commitment_nonce },
            |m: &mut UpdateProof| { &mut m.commitment_nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UpdateProof>(
            "UpdateProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UpdateProof {
    const NAME: &'static str = "UpdateProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.epoch = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.value = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.version = ::std::option::Option::Some(is.read_uint64()?);
                },
                34 => {
                    self.existence_vrf_proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.existence_proof)?;
                },
                50 => {
                    self.previous_version_vrf_proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.previous_version_proof)?;
                },
                66 => {
                    self.commitment_nonce = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::uint64_size(3, v);
        }
        if let Some(v) = self.existence_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(v) = self.existence_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.previous_version_vrf_proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.previous_version_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.commitment_nonce.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.epoch {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.version {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.existence_vrf_proof.as_ref() {
            os.write_bytes(4, v)?;
        }
        if let Some(v) = self.existence_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.previous_version_vrf_proof.as_ref() {
            os.write_bytes(6, v)?;
        }
        if let Some(v) = self.previous_version_proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.commitment_nonce.as_ref() {
            os.write_bytes(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UpdateProof {
        UpdateProof::new()
    }

    fn clear(&mut self) {
        self.epoch = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.existence_vrf_proof = ::std::option::Option::None;
        self.existence_proof.clear();
        self.previous_version_vrf_proof = ::std::option::Option::None;
        self.previous_version_proof.clear();
        self.commitment_nonce = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UpdateProof {
        static instance: UpdateProof = UpdateProof {
            epoch: ::std::option::Option::None,
            value: ::std::option::Option::None,
            version: ::std::option::Option::None,
            existence_vrf_proof: ::std::option::Option::None,
            existence_proof: ::protobuf::MessageField::none(),
            previous_version_vrf_proof: ::std::option::Option::None,
            previous_version_proof: ::protobuf::MessageField::none(),
            commitment_nonce: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UpdateProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UpdateProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UpdateProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:HistoryProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct HistoryProof {
    // message fields
    // @@protoc_insertion_point(field:HistoryProof.update_proofs)
    pub update_proofs: ::std::vec::Vec<UpdateProof>,
    // @@protoc_insertion_point(field:HistoryProof.past_marker_vrf_proofs)
    pub past_marker_vrf_proofs: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:HistoryProof.existence_of_past_marker_proofs)
    pub existence_of_past_marker_proofs: ::std::vec::Vec<MembershipProof>,
    // @@protoc_insertion_point(field:HistoryProof.future_marker_vrf_proofs)
    pub future_marker_vrf_proofs: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:HistoryProof.non_existence_of_future_marker_proofs)
    pub non_existence_of_future_marker_proofs: ::std::vec::Vec<NonMembershipProof>,
    // special fields
    // @@protoc_insertion_point(special_field:HistoryProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HistoryProof {
    fn default() -> &'a HistoryProof {
        <HistoryProof as ::protobuf::Message>::default_instance()
    }
}

impl HistoryProof {
    pub fn new() -> HistoryProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "update_proofs",
            |m: &HistoryProof| { &m.update_proofs },
            |m: &mut HistoryProof| { &mut m.update_proofs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "past_marker_vrf_proofs",
            |m: &HistoryProof| { &m.past_marker_vrf_proofs },
            |m: &mut HistoryProof| { &mut m.past_marker_vrf_proofs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "existence_of_past_marker_proofs",
            |m: &HistoryProof| { &m.existence_of_past_marker_proofs },
            |m: &mut HistoryProof| { &mut m.existence_of_past_marker_proofs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "future_marker_vrf_proofs",
            |m: &HistoryProof| { &m.future_marker_vrf_proofs },
            |m: &mut HistoryProof| { &mut m.future_marker_vrf_proofs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "non_existence_of_future_marker_proofs",
            |m: &HistoryProof| { &m.non_existence_of_future_marker_proofs },
            |m: &mut HistoryProof| { &mut m.non_existence_of_future_marker_proofs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HistoryProof>(
            "HistoryProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HistoryProof {
    const NAME: &'static str = "HistoryProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.update_proofs.push(is.read_message()?);
                },
                18 => {
                    self.past_marker_vrf_proofs.push(is.read_bytes()?);
                },
                26 => {
                    self.existence_of_past_marker_proofs.push(is.read_message()?);
                },
                34 => {
                    self.future_marker_vrf_proofs.push(is.read_bytes()?);
                },
                42 => {
                    self.non_existence_of_future_marker_proofs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.update_proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.past_marker_vrf_proofs {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.existence_of_past_marker_proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.future_marker_vrf_proofs {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        for value in &self.non_existence_of_future_marker_proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.update_proofs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.past_marker_vrf_proofs {
            os.write_bytes(2, &v)?;
        };
        for v in &self.existence_of_past_marker_proofs {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        for v in &self.future_marker_vrf_proofs {
            os.write_bytes(4, &v)?;
        };
        for v in &self.non_existence_of_future_marker_proofs {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HistoryProof {
        HistoryProof::new()
    }

    fn clear(&mut self) {
        self.update_proofs.clear();
        self.past_marker_vrf_proofs.clear();
        self.existence_of_past_marker_proofs.clear();
        self.future_marker_vrf_proofs.clear();
        self.non_existence_of_future_marker_proofs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HistoryProof {
        static instance: HistoryProof = HistoryProof {
            update_proofs: ::std::vec::Vec::new(),
            past_marker_vrf_proofs: ::std::vec::Vec::new(),
            existence_of_past_marker_proofs: ::std::vec::Vec::new(),
            future_marker_vrf_proofs: ::std::vec::Vec::new(),
            non_existence_of_future_marker_proofs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HistoryProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HistoryProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HistoryProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistoryProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SingleAppendOnlyProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SingleAppendOnlyProof {
    // message fields
    // @@protoc_insertion_point(field:SingleAppendOnlyProof.inserted)
    pub inserted: ::std::vec::Vec<AzksElement>,
    // @@protoc_insertion_point(field:SingleAppendOnlyProof.unchanged_nodes)
    pub unchanged_nodes: ::std::vec::Vec<AzksElement>,
    // special fields
    // @@protoc_insertion_point(special_field:SingleAppendOnlyProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SingleAppendOnlyProof {
    fn default() -> &'a SingleAppendOnlyProof {
        <SingleAppendOnlyProof as ::protobuf::Message>::default_instance()
    }
}

impl SingleAppendOnlyProof {
    pub fn new() -> SingleAppendOnlyProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "inserted",
            |m: &SingleAppendOnlyProof| { &m.inserted },
            |m: &mut SingleAppendOnlyProof| { &mut m.inserted },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "unchanged_nodes",
            |m: &SingleAppendOnlyProof| { &m.unchanged_nodes },
            |m: &mut SingleAppendOnlyProof| { &mut m.unchanged_nodes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SingleAppendOnlyProof>(
            "SingleAppendOnlyProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SingleAppendOnlyProof {
    const NAME: &'static str = "SingleAppendOnlyProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.inserted.push(is.read_message()?);
                },
                18 => {
                    self.unchanged_nodes.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.inserted {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.unchanged_nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.inserted {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.unchanged_nodes {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SingleAppendOnlyProof {
        SingleAppendOnlyProof::new()
    }

    fn clear(&mut self) {
        self.inserted.clear();
        self.unchanged_nodes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SingleAppendOnlyProof {
        static instance: SingleAppendOnlyProof = SingleAppendOnlyProof {
            inserted: ::std::vec::Vec::new(),
            unchanged_nodes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SingleAppendOnlyProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SingleAppendOnlyProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SingleAppendOnlyProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SingleAppendOnlyProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:AppendOnlyProof)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AppendOnlyProof {
    // message fields
    // @@protoc_insertion_point(field:AppendOnlyProof.proofs)
    pub proofs: ::std::vec::Vec<SingleAppendOnlyProof>,
    // @@protoc_insertion_point(field:AppendOnlyProof.epochs)
    pub epochs: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:AppendOnlyProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AppendOnlyProof {
    fn default() -> &'a AppendOnlyProof {
        <AppendOnlyProof as ::protobuf::Message>::default_instance()
    }
}

impl AppendOnlyProof {
    pub fn new() -> AppendOnlyProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "proofs",
            |m: &AppendOnlyProof| { &m.proofs },
            |m: &mut AppendOnlyProof| { &mut m.proofs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "epochs",
            |m: &AppendOnlyProof| { &m.epochs },
            |m: &mut AppendOnlyProof| { &mut m.epochs },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AppendOnlyProof>(
            "AppendOnlyProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AppendOnlyProof {
    const NAME: &'static str = "AppendOnlyProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.proofs.push(is.read_message()?);
                },
                18 => {
                    is.read_repeated_packed_uint64_into(&mut self.epochs)?;
                },
                16 => {
                    self.epochs.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.proofs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.epochs {
            my_size += ::protobuf::rt::uint64_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.proofs {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.epochs {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AppendOnlyProof {
        AppendOnlyProof::new()
    }

    fn clear(&mut self) {
        self.proofs.clear();
        self.epochs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AppendOnlyProof {
        static instance: AppendOnlyProof = AppendOnlyProof {
            proofs: ::std::vec::Vec::new(),
            epochs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AppendOnlyProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AppendOnlyProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AppendOnlyProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendOnlyProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btypes.proto\"E\n\tNodeLabel\x12\x1b\n\tlabel_val\x18\x01\x20\x01(\
    \x0cR\x08labelVal\x12\x1b\n\tlabel_len\x18\x02\x20\x01(\rR\x08labelLen\"\
    E\n\x0bAzksElement\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.NodeLabelR\
    \x05label\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05value\"x\n\x0cSibl\
    ingProof\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.NodeLabelR\x05label\
    \x12(\n\x08siblings\x18\x02\x20\x03(\x0b2\x0c.AzksElementR\x08siblings\
    \x12\x1c\n\tdirection\x18\x03\x20\x01(\rR\tdirection\"\x84\x01\n\x0fMemb\
    ershipProof\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.NodeLabelR\x05lab\
    el\x12\x19\n\x08hash_val\x18\x02\x20\x01(\x0cR\x07hashVal\x124\n\x0esibl\
    ing_proofs\x18\x03\x20\x03(\x0b2\r.SiblingProofR\rsiblingProofs\"\x88\
    \x02\n\x12NonMembershipProof\x12\x20\n\x05label\x18\x01\x20\x01(\x0b2\n.\
    NodeLabelR\x05label\x121\n\x0elongest_prefix\x18\x02\x20\x01(\x0b2\n.Nod\
    eLabelR\rlongestPrefix\x12D\n\x17longest_prefix_children\x18\x03\x20\x03\
    (\x0b2\x0c.AzksElementR\x15longestPrefixChildren\x12W\n\x1flongest_prefi\
    x_membership_proof\x18\x04\x20\x01(\x0b2\x10.MembershipProofR\x1clongest\
    PrefixMembershipProof\"\xb6\x03\n\x0bLookupProof\x12\x14\n\x05epoch\x18\
    \x01\x20\x01(\x04R\x05epoch\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05\
    value\x12\x18\n\x07version\x18\x03\x20\x01(\x04R\x07version\x12.\n\x13ex\
    istence_vrf_proof\x18\x04\x20\x01(\x0cR\x11existenceVrfProof\x129\n\x0fe\
    xistence_proof\x18\x05\x20\x01(\x0b2\x10.MembershipProofR\x0eexistencePr\
    oof\x12(\n\x10marker_vrf_proof\x18\x06\x20\x01(\x0cR\x0emarkerVrfProof\
    \x123\n\x0cmarker_proof\x18\x07\x20\x01(\x0b2\x10.MembershipProofR\x0bma\
    rkerProof\x12.\n\x13freshness_vrf_proof\x18\x08\x20\x01(\x0cR\x11freshne\
    ssVrfProof\x12<\n\x0ffreshness_proof\x18\t\x20\x01(\x0b2\x13.NonMembersh\
    ipProofR\x0efreshnessProof\x12)\n\x10commitment_nonce\x18\n\x20\x01(\x0c\
    R\x0fcommitmentNonce\"\xee\x02\n\x0bUpdateProof\x12\x14\n\x05epoch\x18\
    \x01\x20\x01(\x04R\x05epoch\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\x05\
    value\x12\x18\n\x07version\x18\x03\x20\x01(\x04R\x07version\x12.\n\x13ex\
    istence_vrf_proof\x18\x04\x20\x01(\x0cR\x11existenceVrfProof\x129\n\x0fe\
    xistence_proof\x18\x05\x20\x01(\x0b2\x10.MembershipProofR\x0eexistencePr\
    oof\x12;\n\x1aprevious_version_vrf_proof\x18\x06\x20\x01(\x0cR\x17previo\
    usVersionVrfProof\x12F\n\x16previous_version_proof\x18\x07\x20\x01(\x0b2\
    \x10.MembershipProofR\x14previousVersionProof\x12)\n\x10commitment_nonce\
    \x18\x08\x20\x01(\x0cR\x0fcommitmentNonce\"\xed\x02\n\x0cHistoryProof\
    \x121\n\rupdate_proofs\x18\x01\x20\x03(\x0b2\x0c.UpdateProofR\x0cupdateP\
    roofs\x123\n\x16past_marker_vrf_proofs\x18\x02\x20\x03(\x0cR\x13pastMark\
    erVrfProofs\x12V\n\x1fexistence_of_past_marker_proofs\x18\x03\x20\x03(\
    \x0b2\x10.MembershipProofR\x1bexistenceOfPastMarkerProofs\x127\n\x18futu\
    re_marker_vrf_proofs\x18\x04\x20\x03(\x0cR\x15futureMarkerVrfProofs\x12d\
    \n%non_existence_of_future_marker_proofs\x18\x05\x20\x03(\x0b2\x13.NonMe\
    mbershipProofR\x20nonExistenceOfFutureMarkerProofs\"x\n\x15SingleAppendO\
    nlyProof\x12(\n\x08inserted\x18\x01\x20\x03(\x0b2\x0c.AzksElementR\x08in\
    serted\x125\n\x0funchanged_nodes\x18\x02\x20\x03(\x0b2\x0c.AzksElementR\
    \x0eunchangedNodes\"Y\n\x0fAppendOnlyProof\x12.\n\x06proofs\x18\x01\x20\
    \x03(\x0b2\x16.SingleAppendOnlyProofR\x06proofs\x12\x16\n\x06epochs\x18\
    \x02\x20\x03(\x04R\x06epochsb\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(NodeLabel::generated_message_descriptor_data());
            messages.push(AzksElement::generated_message_descriptor_data());
            messages.push(SiblingProof::generated_message_descriptor_data());
            messages.push(MembershipProof::generated_message_descriptor_data());
            messages.push(NonMembershipProof::generated_message_descriptor_data());
            messages.push(LookupProof::generated_message_descriptor_data());
            messages.push(UpdateProof::generated_message_descriptor_data());
            messages.push(HistoryProof::generated_message_descriptor_data());
            messages.push(SingleAppendOnlyProof::generated_message_descriptor_data());
            messages.push(AppendOnlyProof::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
